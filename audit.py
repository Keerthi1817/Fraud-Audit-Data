# -*- coding: utf-8 -*-
"""Audit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BdInL7c3BqrSsY5I3ks-3tJOWzLk2gNR
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from xgboost import XGBClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
import pickle

audit_data=pd.read_csv('audit_data.csv')
trial_data=pd.read_csv('trial.csv')

audit_data.head()

trial_data.head()

audit_data.shape

trial_data.shape

"""Checking for missing values"""

audit_data.isnull().sum()

trial_data.isnull().sum()

audit_data.dropna(inplace=True)
trial_data.dropna(inplace =True)

"""Removing Unwanted Features




"""

audit_data.drop({"Sector_score","LOCATION_ID",'numbers','District_Loss','Detection_Risk'},axis=1,inplace=True)  
trial_data.drop({"Sector_score","LOCATION_ID",'numbers'},axis=1,inplace=True)

audit_data.head()

trial_data.head()

"""Splitting the data"""

ytrain_target=audit_data["Risk"]
xtrain_features=audit_data.drop({"Risk"},axis=1)

ytrain_target.head()

xtrain_features.head()

ytest_target=trial_data["Risk"]
xtest_features=trial_data.drop({"Risk"},axis=1)

ytest_target.head()

xtest_features.head()

xtest_features.shape

"""Building the Model

Model 1: XGBoost
"""

xgb = XGBClassifier()
xgb.fit(xtest_features,ytest_target)

predict=xgb.predict(xtest_features)
from sklearn.metrics import accuracy_score
accuracy=accuracy_score(ytest_target,predict)
print("Accuracy:",accuracy*100)

"""Model 2: RandomForest"""

rfc = RandomForestClassifier()
rfc.fit(xtest_features,ytest_target)

predict=rfc.predict(xtest_features)

accuracy=accuracy_score(ytest_target,predict)
print("Accuracy:",accuracy*100)
#Making a pickle file of our Model
pickle.dump(rfc, open('audit.pkl', 'wb'))

"""Testing with own Inputs"""

input=(4.18,6,2.5,2,6.68,2,3.38,2,2,0,2,0,2,2.4)
input_data_numpy=np.asarray(input)
input_reshape=input_data_numpy.reshape(1,-1)
prediction=xgb.predict(input_reshape)
if prediction[0]==0:
  print('No Risk')
else:
  print('Risk')

